plugins {
	id 'org.springframework.boot' version '3.0.2'
	id 'io.spring.dependency-management' version '1.1.0'
	//id 'org.graalvm.buildtools.native' version '0.9.18'
	id 'com.google.cloud.tools.jib' version '3.3.1'
	id 'jacoco'
	id 'java'
}

ext {
	set('dockerRegistry', "goafabric")
	set('baseImage', "ibm-semeru-runtimes:open-17.0.4.1_1-jre-focal@sha256:29d74ccd3e20aff9cca04df418ba6dca38cf86ea1dba42635c8d8ba89f2d25a5")
}

dependencies {
	constraints {
		implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.0.2'
		implementation 'org.mapstruct:mapstruct:1.5.2.Final'
		annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.2.Final'
	}

	dependencyManagement.imports {
		mavenBom 'org.springframework.cloud:spring-cloud-dependencies:2022.0.0'
	}
}

group = 'org.goafabric'
version = '1.0.0-SNAPSHOT'
sourceCompatibility = '17'

repositories {
	maven { url 'https://repo.spring.io/milestone' }
	maven { url 'https://repo.spring.io/snapshot' }
	maven { url 'https://s01.oss.sonatype.org/content/repositories/snapshots'}
	mavenCentral()
}

dependencies {
	//web
	implementation 'org.springframework.boot:spring-boot-starter'

	//spring integration
	implementation 'org.springframework.boot:spring-boot-starter-integration'

	implementation 'org.springframework.integration:spring-integration-file'
	implementation 'org.springframework.integration:spring-integration-ip'
	implementation 'org.springframework.integration:spring-integration-jdbc'

	//database
	implementation 'com.h2database:h2'
	implementation 'org.flywaydb:flyway-core'
	implementation 'org.springframework.boot:spring-boot-starter-jdbc' //yes we also need this !!


	//code generation
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	testAnnotationProcessor 'org.projectlombok:lombok'

	implementation 'org.mapstruct:mapstruct'
	annotationProcessor 'org.mapstruct:mapstruct-processor'

	//test
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.boot:spring-boot-starter-webflux'
	testImplementation 'org.springframework.integration:spring-integration-test'
}

test {
	useJUnitPlatform()
	exclude '**/*NRIT*'
	finalizedBy jacocoTestReport
}

jib {
	from.image = "${baseImage}"
	from.platforms = [com.google.cloud.tools.jib.gradle.PlatformParameters.of("linux/amd64"), com.google.cloud.tools.jib.gradle.PlatformParameters.of("linux/arm64")]
	to.image = "${dockerRegistry}/${project.name}:${project.version}"
	container.jvmFlags = ['-Xms256m', '-Xmx256m']
}

def archSuffix = (System.properties['os.arch'] == 'aarch64') ? "-arm64v8" : ""
tasks.named('bootBuildImage') {
	builder = 'dashaun/java-native-builder-multiarch:7.41.0'
	bootBuildImage.imageName = "${dockerRegistry}/${project.name}-native${archSuffix}:${project.version}"
	environment = ['BP_NATIVE_IMAGE': 'true', 'BP_JVM_VERSION': '17', 'BP_NATIVE_IMAGE_BUILD_ARGUMENTS': '-J-Xmx4000m']
}
task dockerImageNativeRun(type:Exec) { dependsOn('bootBuildImage')
	commandLine 'docker', 'run', "--rm", "${dockerRegistry}/${project.name}-native${archSuffix}:${project.version}", '-check-integrity'
}
task dockerImageNative(type:Exec) { dependsOn(dockerImageNativeRun)
	commandLine 'docker', 'push', "${dockerRegistry}/${project.name}-native${archSuffix}:${project.version}"
}